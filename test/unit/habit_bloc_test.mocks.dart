// Mocks generated by Mockito 5.4.5 from annotations
// in solutech_interview/test/unit/habit_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:solutech_interview/data/repositories/habit_repository.dart'
    as _i3;
import 'package:solutech_interview/domain/models/habit.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHabit_0 extends _i1.SmartFake implements _i2.Habit {
  _FakeHabit_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HabitRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitRepository extends _i1.Mock implements _i3.HabitRepository {
  MockHabitRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Habit> createHabit(_i2.Habit? habit) => (super.noSuchMethod(
        Invocation.method(
          #createHabit,
          [habit],
        ),
        returnValue: _i4.Future<_i2.Habit>.value(_FakeHabit_0(
          this,
          Invocation.method(
            #createHabit,
            [habit],
          ),
        )),
      ) as _i4.Future<_i2.Habit>);

  @override
  _i4.Stream<List<_i2.Habit>> getUserHabits(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserHabits,
          [userId],
        ),
        returnValue: _i4.Stream<List<_i2.Habit>>.empty(),
      ) as _i4.Stream<List<_i2.Habit>>);

  @override
  _i4.Future<void> updateHabit(_i2.Habit? habit) => (super.noSuchMethod(
        Invocation.method(
          #updateHabit,
          [habit],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteHabit(
    String? habitId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteHabit,
          [
            habitId,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Habit> markHabitAsCompleted(_i2.Habit? habit) =>
      (super.noSuchMethod(
        Invocation.method(
          #markHabitAsCompleted,
          [habit],
        ),
        returnValue: _i4.Future<_i2.Habit>.value(_FakeHabit_0(
          this,
          Invocation.method(
            #markHabitAsCompleted,
            [habit],
          ),
        )),
      ) as _i4.Future<_i2.Habit>);

  @override
  List<_i2.Habit> getOfflineHabits(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getOfflineHabits,
          [userId],
        ),
        returnValue: <_i2.Habit>[],
      ) as List<_i2.Habit>);

  @override
  _i4.Future<void> syncOfflineChanges(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #syncOfflineChanges,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
